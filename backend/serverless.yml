service: carpal

provider:
  name: aws
  runtime: nodejs6.10
  region: ap-southeast-2
  stage: dev
  memorySize: 128
  timeout: 30
  environment:
    AUTH0_CLIENT_ID: ${file(./props.json):AUTH0_CLIENT_ID}
    MYSQL_HOST: carpal.cttgjqpjknhf.ap-southeast-2.rds.amazonaws.com
    MYSQL_PW: ${file(./secrets.json):MYSQL_PW}
    MYSQL_PORT: ${file(./secrets.json):MYSQL_PORT}
    MYSQL_USER: carpaladmin
    DOMAIN: carpal.org.au
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}

  vpc:
    securityGroupIds:
      - sg-d35dabab
    subnetIds:
      - subnet-fcbd0fa5
      - subnet-49bccb2d
      - subnet-93960fe5

functions:
  auth:
    handler: auth/auth.auth
    cors: true
  currentTime:
    handler: utils/ping.endpoint
    events:
      - http:
          path: ping
          method: get
  loggedin:
    handler: auth/loggedin.loggedin
    events:
      - http:
          path: authcheck
          method: get
          authorizer: auth
          cors: true
  create:
    handler: rides/create.create
    events:
      - http:
          path: rides
          method: post
          cors: true

  update:
    handler: rides/update.update
    events:
      - http:
          path: rides/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true

  list:
    handler: rides/list.list
    # runtime: nodejs8.10
    events:
      - http:
          path: rides
          method: get
          cors: true

  findone:
    handler: rides/findone.findone
    events:
      - http:
          path: rides/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
  maps:
    handler: map/maps.maps
    events:
      - http:
          path: map
          method: get
          cors: true
  notify:
    handler: notify
      events:
        - schedule: rate(2 hours)
        - schedule: cron(0 12 * * ? *)
resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
