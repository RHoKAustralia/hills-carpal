service: carpal

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-southeast-2
  stage: dev
  memorySize: 128
  timeout: 30
  environment:
    AUTH0_CLIENT_ID: ${file(./props.json):AUTH0_CLIENT_ID}
    MYSQL_HOST: carpal-dev.cluster-cbmtdkajuu0s.ap-southeast-2.rds.amazonaws.com
    MYSQL_PW: ${file(./secrets.json):MYSQL_PW}
    MYSQL_PORT: ${file(./secrets.json):MYSQL_PORT}
    MYSQL_USER: admin
    DOMAIN: carpal.org.au
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}

  vpc:
    securityGroupIds:
      - sg-080b105495ba231ea
    subnetIds:
      - subnet-00031e7d539e35ea0
      - subnet-051ce2d18d2309f65
      - subnet-09de08cb31b9151a8

functions:
  auth:
    handler: src/main/auth/auth.auth
    cors: true
  currentTime:
    handler: src/main/utils/ping.endpoint
    events:
      - http:
          path: ping
          method: get
  loggedin:
    handler: src/main/auth/loggedin.loggedin
    events:
      - http:
          path: authcheck
          method: get
          authorizer: auth
          cors: true
  create:
    handler: src/main/rides/awsLambdaRidesApis.create
    events:
      - http:
          path: rides
          method: post
          cors: true

  update:
    handler: src/main/rides/awsLambdaRidesApis.update
    events:
      - http:
          path: rides/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
  acceptRide:
    handler: src/main/rides/awsLambdaRidesApis.acceptRide
    events:
      - http:
          path: rides/{id}/accept
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
  declineRide:
    handler: src/main/rides/awsLambdaRidesApis.declineRide
    events:
      - http:
          path: rides/{id}/decline
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
  completeRide:
    handler: src/main/rides/awsLambdaRidesApis.completeRide
    events:
      - http:
          path: rides/{id}/complete
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
  list:
    handler: src/main/rides/awsLambdaRidesApis.list
    # runtime: nodejs8.10
    events:
      - http:
          path: rides
          method: get
          cors: true

  findone:
    handler: src/main/rides/awsLambdaRidesApis.findOne
    events:
      - http:
          path: rides/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  createClient:
    handler: src/main/clients/awsLambdaClientsApis.create
    events:
      - http:
          path: clients
          method: post
          cors: true

  updateClient:
    handler: src/main/clients/awsLambdaClientsApis.update
    events:
      - http:
          path: clients/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true

  listClients:
    handler: src/main/clients/awsLambdaClientsApis.list
    events:
      - http:
          path: clients
          method: get
          cors: true

  deleteClient:
    handler: src/main/clients/awsLambdaClientsApis.delete
    events:
      - http:
          path: clients/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true

  # uploadClientImage:
  #   handler: src/main/images/awsLambdaImagesApis.upload
  #   events:
  #     - http:
  #         path: clients/{clientId}/images
  #         method: post
  #         cors: true
  #         request:
  #           parameters:
  #             paths:
  #               clientId: true

  # listImages:
  #   handler: src/main/images/awsLambdaImagesApis.list
  #   events:
  #     - http:
  #         path: clients/{clientId}/images
  #         method: get
  #         cors: true
  #         request:
  #           parameters:
  #             paths:
  #               clientId: true

  # showImageContent:
  #   handler: src/main/images/awsLambdaImagesApis.show
  #   events:
  #     - http:
  #         path: images/{imageId}
  #         method: get
  #         request:
  #           parameters:
  #             paths:
  #               imageId: true

  # deleteImage:
  #   handler: src/main/images/awsLambdaImagesApis.delete
  #   events:
  #     - http:
  #         path: images/{id}
  #         method: delete
  #         cors: true
  #         request:
  #           parameters:
  #             paths:
  #               id: true

  # updateImage:
  #   handler: src/main/images/awsLambdaImagesApis.update
  #   events:
  #     - http:
  #         path: images/{id}
  #         method: put
  #         cors: true
  #         request:
  #           parameters:
  #             paths:
  #               id: true

  survey:
    handler: src/main/survey/survey.survey
    events:
      - http:
          path: survey/{proxy+}
          method: get
          cors: true
      - http:
          path: survey/{proxy+}
          method: post
          cors: true

#  notify:
#    handler: notify
#      events:
#        - schedule: rate(2 hours)
#        - schedule: cron(0 12 * * ? *)
resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

plugins:
  - serverless-offline
  - serverless-apigw-binary

custom:
  serverless-offline:
    noEnvironment: true
    port: 8080
  apigwBinary:
    types: #list of mime-types
      - 'image/jpeg'
      - 'image/png'
