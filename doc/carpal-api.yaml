openapi: 3.0.0
info:
  title: Carpal API
  version: 0.0.1
paths:
  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                    example: 1
                  role:
                    type: string
                    example: Can be facilitator / driver / admin
  /rides:
    get:
      summary: Get rides
      description: We could send user object or backend reads it from cookie
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RidesResponse'
    post:
      summary: Add new Ride information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RidesRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
                    example: Can either be facilitator / driver / admin
    put:
      summary: Update Ride information
      requestBody:
        required: true
        description: Only pass in body the data you want to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRidesRequest'
      responses:
        '200':
          description: Success and return the updated rides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RidesResponse'
components:
  schemas:
    LoginRequest:
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    RidesResponse:
      properties:
        id:
          type: string
        client:
          type: string
          description: (Return only if facilitator)
        datetime:
          type: number
        locationFrom:
          type: string
        locationTo:
          type: string
        fbLink:
          type: string
        driverGender:
          type: string
          description: (Return only if facilitator) Can be Male / Female
        carType:
          type: string
          description: (Return only if facilitator)
        status:
          type: string
          description: (Return only if facilitator)
      required:
        - id
        - datetime
        - locationFrom
        - locationTo
        - fbLink
    RidesRequest:
      properties:
        client:
          type: string
        pickupTime:
          type: number
          description: number in miiliseconds
        locationFrom:
          $ref: '#/components/schemas/Location'
        locationTo:
          type: string
          description: Array of locations (in Lat and Long)
        fbLink:
          type: string
        driverGender:
          type: string
          description: Can be Male / Female / All
        carType:
          type: string
        status:
          type: string
      required:
        - client
        - pickupTime
        - locationFrom
        - locationTo
        - fbLink
        - driverGender
        - carType
        - status
    UpdateRidesRequest:
      properties:
        pickupTime:
          type: number
          description: number in miiliseconds
        locationFrom:
          $ref: '#/components/schemas/Location'
        locationTo:
          type: string
          description: Array of locations (in Lat and Long)
        fbLink:
          type: string
        driverGender:
          type: string
          description: Can be Male / Female / All
        carType:
          type: string
        status:
          type: string
          description: Can be Open / Confirmed / Canceled / Ended
    Location:
      properties:
        latitude:
          type: number
        longitude:
          type: number
        suburb:
          type: string
        postcode:
          type: integer
        placeName:
          type: string
          description: Displayable Address (i.e. locaiton parts separated in comma)
